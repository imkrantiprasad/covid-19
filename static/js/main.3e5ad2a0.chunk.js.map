{"version":3,"sources":["Header.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","href","App","state","stats","con","stLoaded","date","Date","toLocaleString","fetch","then","res","json","setState","this","id","totalCases","activeCases","recovered","deaths","style","overflowX","map","stat","noOfCases","cured","substring","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOASeA,MAPf,WACI,OACI,6BACI,wBAAIC,UAAU,QAAd,4B,MCHG,SAASC,IACpB,OACI,6BACI,uBAAGD,UAAU,QAAb,iBAAkC,uBAAGE,KAAK,wDAAR,mB,IC4F/BC,E,kDAvFb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,MAAO,GACPC,IAAK,GACLC,UAAU,EACVC,MAAM,IAAIC,MAAOC,kBANP,E,gEASO,IAAD,OAClBC,MAAM,mDACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACJ,EAAKC,SAAS,CACZV,MAAOS,EACPP,UAAU,OAIhBI,MAAM,mGACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACJ,EAAKC,SAAS,CACZT,IAAKQ,S,+BAKH,IAAD,EACmBE,KAAKZ,MAAzBC,EADC,EACDA,MACN,OAFO,EACME,SAMT,yBAAKP,UAAU,QACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,QAAQiB,GAAG,OAA1B,WAAyCD,KAAKZ,MAAME,IAAIY,YACxD,yBAAKlB,UAAU,SAASiB,GAAG,OAA3B,WAA0CD,KAAKZ,MAAME,IAAIa,aACzD,yBAAKnB,UAAU,UAAUiB,GAAG,OAA5B,WAA2CD,KAAKZ,MAAME,IAAIc,WAC1D,yBAAKpB,UAAU,QAAQiB,GAAG,OAA1B,YAA0CD,KAAKZ,MAAME,IAAIe,SAE3D,6BACA,2BAAOC,MAAO,CAAEC,UAAW,SACzB,+BACE,4BACE,yCACA,wBAAIN,GAAG,SAAP,SACA,wBAAIA,GAAG,UAAP,UACA,wBAAIA,GAAG,SAAP,SACA,wBAAIA,GAAG,SAAP,YAGJ,+BACGZ,EAAMmB,KAAI,SAAAC,GAAI,OACb,4BACE,4BAAKA,EAAKrB,OACV,wBAAIa,GAAG,SAASQ,EAAKC,WACrB,wBAAIT,GAAG,UAAUQ,EAAKC,UAAYD,EAAKE,MAAQF,EAAKJ,QACpD,wBAAIJ,GAAG,SAASQ,EAAKE,OACrB,wBAAIV,GAAG,SAASQ,EAAKJ,cAM7B,6BA/BF,UAgCQL,KAAKZ,MAAMI,KAAKoB,UAAU,EAAG,IAErC,yBAAK5B,UAAU,SACb,uBAAGE,KAAK,oCAAR,yBAAoE,6BAEpE,uBAAGA,KAAK,mDAAR,wBAAkF,6BAElF,uBAAGA,KAAK,6BAAR,6DAAiG,6BACjG,uBAAGA,KAAK,8CAAR,eAAoE,8BAGtE,kBAACD,EAAD,OAjDG,yBAAKgB,GAAG,e,GAjCHY,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3e5ad2a0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Header() {\r\n    return (\r\n        <div>\r\n            <h1 className=\"head\">Covid-19 Updates India</h1>\r\n        </div>\r\n    )\r\n}\r\nexport default Header;","import React from 'react'\r\n\r\nexport default function Footer() {\r\n    return (\r\n        <div>\r\n            <p className=\"foot\">Developed By: <a href=\"https://www.linkedin.com/in/kranti-prasad-690034131/\">Kranti Prasad</a></p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport Header from './Header'\nimport './App.css';\nimport Footer from './Footer';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n// import stateData from './stateData';\n\n\nclass App extends React.Component {\n\n  constructor() {\n    super()\n    this.state = {\n      stats: [],\n      con: [],\n      stLoaded: false,\n      date: new Date().toLocaleString()\n    }\n  }\n  componentDidMount() {\n    fetch(\"https://covid-india-cases.herokuapp.com/states/\")\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          stats: json,\n          stLoaded: true\n        })\n      });\n\n    fetch(\"https://api.apify.com/v2/key-value-stores/toDWvRj1JpTXiM8FF/records/LATEST?disableRedirect=true\")\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          con: json\n        })\n      });\n  }\n\n  render() {\n    var { stats, stLoaded } = this.state;\n    if (!stLoaded) {\n      return <div id=\"loader\"></div>\n    }\n    else {\n      return (\n        <div className=\"main\" >\n          <Header />\n          <div className=\"mid\">\n            <div className=\"flex-container\">\n              <div className=\"total\" id=\"box\"> Total: {this.state.con.totalCases}</div>\n              <div className=\"active\" id=\"box\">Active: {this.state.con.activeCases}</div>\n              <div className=\"recover\" id=\"box\"> Cured: {this.state.con.recovered}</div>\n              <div className=\"death\" id=\"box\"> Deaths: {this.state.con.deaths}</div>\n            </div>\n            <br />\n            <table style={{ overflowX: 'auto' }}>\n              <thead>\n                <tr>\n                  <th>State/UTs</th>\n                  <th id=\"total\">Total</th>\n                  <th id=\"active\">Active</th>\n                  <th id=\"cured\">Cured</th>\n                  <th id=\"death\">Deaths</th>\n                </tr>\n              </thead>\n              <tbody>\n                {stats.map(stat => (\n                  <tr>\n                    <td>{stat.state}</td>\n                    <td id=\"total\">{stat.noOfCases}</td>\n                    <td id=\"active\">{stat.noOfCases - stat.cured - stat.deaths}</td>\n                    <td id=\"cured\">{stat.cured}</td>\n                    <td id=\"death\">{stat.deaths}</td>\n                  </tr>\n                ))}\n\n              </tbody>\n            </table>\n            <br />\n          As on: {this.state.date.substring(0, 9)}\n          </div>\n          <div className=\"links\">\n            <a href=\"https://apify.com/zuzka/covid-in\">Country Statistic API</a><hr />\n\n            <a href=\"https://covid-india-cases.herokuapp.com/states/\">States Statistic API</a><hr />\n\n            <a href=\"https://www.mohfw.gov.in/\">Ministry of Health and Family Welfare Government of India</a><hr />\n            <a href=\"https://github.com/imkrantiprasad/covid-19\">Source Code</a><hr />\n\n          </div>\n          <Footer />\n        </div >\n      )\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}